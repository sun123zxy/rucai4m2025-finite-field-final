import Mathlib

open Set


-- H01: If G is an infinite cyclic group, then G ≅ ℤ
lemma infinite_cyclic_group_iso_int (G : Type*) [Group G] [IsCyclic G] [Infinite G] :
  Nonempty (G ≃* Multiplicative ℤ) :=
sorry

-- H02: E/F is a field extension, g ∈ E, if g is algebraic over F,
-- then F[g] is finite dimensional over F
lemma adjoin_finite_of_algebraic (F E : Type*) [Field F] [Field E] [Algebra F E] (g : E)
    (h : IsAlgebraic F g) : FiniteDimensional F (IntermediateField.adjoin F {g}) :=
sorry

-- H03: If F is a field and Fˣ ≅ ℤ, then char F = 2
lemma char_two_of_units_iso_int (F : Type*) [Field F] (h : Nonempty (Fˣ ≃* Multiplicative ℤ)) :
  CharP F 2 :=
sorry

-- Helper lemma: If Fˣ is infinite and cyclic, then Fˣ ≅ ℤ
lemma units_iso_int (F : Type*) [Field F] [IsCyclic Fˣ] [Infinite Fˣ] :
  Nonempty (Fˣ ≃* Multiplicative ℤ) :=
infinite_cyclic_group_iso_int Fˣ

-- Helper lemma: If F is a field of characteristic 2 and Fˣ is cyclic, then F is finite
lemma finite_of_char_two_cyclic (F : Type*) [Field F] [CharP F 2] [IsCyclic Fˣ] :
  Finite F := by
  -- Since char F = 2, we have an algebra structure F over ZMod 2
  haveI : Algebra (ZMod 2) F := ZMod.algebra _ _
  -- Say Fˣ is generated by g
  obtain ⟨g, hg : ∀ x : Fˣ, x ∈ Subgroup.zpowers g⟩ := @IsCyclic.exists_generator Fˣ _ _
  -- Then g is algebraic over 𝔽₂
  have g_algebraic : IsAlgebraic (ZMod 2) (g.val : F) := sorry
  -- Then F = 𝔽₂[g]
  have field_eq : (⊤ : IntermediateField (ZMod 2) F) =
    IntermediateField.adjoin (ZMod 2) {g.val} := sorry
  -- Conclude that F is finite, by H02
  haveI : FiniteDimensional (ZMod 2) (IntermediateField.adjoin (ZMod 2) {g.val}) :=
    adjoin_finite_of_algebraic (ZMod 2) F g.val g_algebraic
  -- Since F = 𝔽₂[g] and 𝔽₂[g] is finite dimensional over 𝔽₂, F is finite dimensional
  haveI : FiniteDimensional (ZMod 2) F := sorry
  -- Since 𝔽₂ is finite and F is finite dimensional over 𝔽₂, F is finite
  exact sorry

-- Main theorem: If F is a field with cyclic multiplicative group, then F is finite
theorem finite_field_of_cyclic_units (F : Type*) [Field F] [IsCyclic Fˣ] :
  Finite F := by
  -- Proof by contradiction
  by_contra h_infinite
  -- Assume F is infinite
  haveI : Infinite F := not_finite_iff_infinite.mp h_infinite
  -- Then Fˣ is infinite
  haveI : Infinite Fˣ :=by
    -- 反证法：假设单位群有限
    haveI k₁: Infinite F := not_finite_iff_infinite.mp h_infinite
    by_contra h_finite_unit
    -- 获取单位群有限的实例
    have : Finite Fˣ := Finite.of_not_infinite h_finite_unit
    -- 将整个域分解为零元素和单位群的并集
    have : (univ : Set F) = {0} ∪ (Set.range (Units.val : Fˣ → F)) := by
      ext x
      simp [Units.exists_iff_ne_zero]  -- 利用域的性质：元素要么为零要么为单位
      by_cases x=0 
      · left
        (expose_names; exact h)
      · right
        have p₁:x ≠ 0:=by 
          (expose_names; exact h)
        refine CanLift.prf x ?_
        simp
        exact p₁
    have set_finite : Set.Finite (univ : Set F) := by
      rw [this]  -- 应用集合分解
      apply Set.Finite.union
      · exact finite_singleton 0  -- 单点集{0}有限
      · have p₁:Function.Injective (Units.val : Fˣ → F):=by
          exact Units.ext
        have p₂:=Finite.of_injective_finite_range p₁
        exact finite_range Units.val
    -- 与域的无限性假设矛盾
    have : Set.Infinite (univ : Set F) :=by
      exact infinite_univ_iff.mpr k₁
    exact this set_finite
  -- Then Fˣ ≅ ℤ by H01
  have h_iso : Nonempty (Fˣ ≃* Multiplicative ℤ) := units_iso_int F
  -- Then char F = 2 by H03
  haveI : CharP F 2 := char_two_of_units_iso_int F h_iso
  -- Then F is finite by H04 and the fact that char 2 + cyclic units implies finite field
  have h_finite : Finite F := finite_of_char_two_cyclic F
  -- Contradiction with our assumption that F is infinite
  exact h_infinite h_finite
